-- MySQL Script generated by MySQL Workbench
-- Sat Jun  9 10:55:40 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema BookLibInventory
-- -----------------------------------------------------
-- Database storage for book inventory
DROP SCHEMA IF EXISTS `BookLibInventory` ;

-- -----------------------------------------------------
-- Schema BookLibInventory
--
-- Database storage for book inventory
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `BookLibInventory` DEFAULT CHARACTER SET utf8 ;
USE `BookLibInventory` ;

-- -----------------------------------------------------
-- Table `BookLibInventory`.`AuthorsTab`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BookLibInventory`.`AuthorsTab` ;

CREATE TABLE IF NOT EXISTS `BookLibInventory`.`AuthorsTab` (
  `idAuthors` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `LastName` VARCHAR(20) NOT NULL,
  `FirstNameOrInitial` VARCHAR(20) NOT NULL,
  `MiddleNameOrInitial` VARCHAR(45) NULL,
  `YearOfBirth` VARCHAR(4) NULL,
  `YearOfDeath` VARCHAR(4) NULL,
  PRIMARY KEY (`idAuthors`, `LastName`, `FirstNameOrInitial`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idAuthors_UNIQUE` ON `BookLibInventory`.`AuthorsTab` (`idAuthors` ASC);

CREATE INDEX `LastName` ON `BookLibInventory`.`AuthorsTab` (`LastName` ASC);

CREATE INDEX `LastCMFirst` ON `BookLibInventory`.`AuthorsTab` (`LastName` ASC, `FirstNameOrInitial` ASC);


-- -----------------------------------------------------
-- -----------------------------------------------------
-- Table `BookLibInventory`.`BookInfo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BookLibInventory`.`BookInfo` ;

CREATE TABLE IF NOT EXISTS `BookLibInventory`.`BookInfo` (
  `idBookInfo` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `TitleFKbi` INT UNSIGNED NOT NULL,
  `AuthorFKbi` INT UNSIGNED NOT NULL COMMENT 'Foreign Key Into Author Table',
  `CategoryFKbi` INT UNSIGNED NOT NULL,
  `BookFormatBi` INT UNSIGNED NOT NULL COMMENT 'Foreign Key Into Format Table',
  `SeriesFKBi` INT UNSIGNED NOT NULL COMMENT 'Foreign Key into Series Table',
  PRIMARY KEY (`idBookInfo`, `TitleFKbi`, `AuthorFKbi`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idBookInfo_UNIQUE` ON `BookLibInventory`.`BookInfo` (`idBookInfo` ASC);

CREATE INDEX `CategoryFKbI` ON `BookLibInventory`.`BookInfo` (`CategoryFKbi` ASC);

CREATE INDEX `AuthorFKbi` ON `BookLibInventory`.`BookInfo` (`AuthorFKbi` ASC);

CREATE INDEX `BookFormatFKBi` ON `BookLibInventory`.`BookInfo` (`BookFormatBi` ASC);

CREATE INDEX `SeriesFKBi` ON `BookLibInventory`.`BookInfo` (`SeriesFKBi` ASC);

CREATE INDEX `TitleFKbi` ON `BookLibInventory`.`BookInfo` (`TitleFKbi` ASC);


-- -----------------------------------------------------
-- Table `BookLibInventory`.`BookFormat`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BookLibInventory`.`BookFormat` ;

CREATE TABLE IF NOT EXISTS `BookLibInventory`.`BookFormat` (
  `idFormat` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `FormatName` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idFormat`, `FormatName`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idFormat_UNIQUE` ON `BookLibInventory`.`BookFormat` (`idFormat` ASC);

CREATE UNIQUE INDEX `FormatName_UNIQUE` ON `BookLibInventory`.`BookFormat` (`FormatName` ASC);


-- -----------------------------------------------------
-- Table `BookLibInventory`.`ISBN`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BookLibInventory`.`ISBN` ;

CREATE TABLE IF NOT EXISTS `BookLibInventory`.`ISBN` (
  `BookFKiSBN` INT UNSIGNED NOT NULL,
  `ISBNumber` VARCHAR(32) NOT NULL,
  PRIMARY KEY (`ISBNumber`, `BookFKiSBN`))
ENGINE = InnoDB;

CREATE INDEX `ISBNumber` ON `BookLibInventory`.`ISBN` (`ISBNumber` ASC);


-- Table `BookLibInventory`.`PublishingInfo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BookLibInventory`.`PublishingInfo` ;

CREATE TABLE IF NOT EXISTS `BookLibInventory`.`PublishingInfo` (
  `idPublishingInfo` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `BookFK` INT UNSIGNED NOT NULL COMMENT 'Foreign Key into the Book Info Table.',
  `Copyright` VARCHAR(4) NOT NULL,
  `Edition` INT UNSIGNED NULL,
  `Publisher` VARCHAR(45) NULL,
  `OutOfPrint` TINYINT NULL COMMENT 'Is the book still being printed or has it lapsed.',
  `Printing` INT UNSIGNED NULL COMMENT 'A book may be printed may times. This will indicate which printing it is. Check the back of the title page.',
  PRIMARY KEY (`idPublishingInfo`, `BookFK`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idPublishingInfo_UNIQUE` ON `BookLibInventory`.`PublishingInfo` (`idPublishingInfo` ASC);

CREATE INDEX `BookFKPubI` ON `BookLibInventory`.`PublishingInfo` (`BookFK` ASC);


-- -----------------------------------------------------
-- Table `BookLibInventory`.`PurchaseInfo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BookLibInventory`.`PurchaseInfo` ;

CREATE TABLE IF NOT EXISTS `BookLibInventory`.`PurchaseInfo` (
  `BookFKPurI` INT UNSIGNED NOT NULL,
  `PuchaseDate` DATE NULL,
  `ListPrice` DOUBLE NULL,
  `PaidPrice` DOUBLE NULL,
  `Vendor` VARCHAR(64) NULL,
  PRIMARY KEY (`BookFKPurI`))
ENGINE = InnoDB;

CREATE INDEX `BookFKPurI` ON `BookLibInventory`.`PurchaseInfo` (`BookFKPurI` ASC);


-- -----------------------------------------------------
-- Table `BookLibInventory`.`Series`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BookLibInventory`.`Series` ;

CREATE TABLE IF NOT EXISTS `BookLibInventory`.`Series` (
  `idSeries` INT UNSIGNED NOT NULL,
  `AuthorFK` INT UNSIGNED NOT NULL COMMENT 'Foriegn Key into Author Table',
  `SeriesName` VARCHAR(128) NOT NULL,
  PRIMARY KEY (`idSeries`, `AuthorFK`, `SeriesName`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idSeries_UNIQUE` ON `BookLibInventory`.`Series` (`idSeries` ASC);

CREATE INDEX `AuthorFKs` ON `BookLibInventory`.`Series` (`AuthorFK` ASC);


-- -----------------------------------------------------
-- Table `BookLibInventory`.`Title`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BookLibInventory`.`Title` ;

CREATE TABLE IF NOT EXISTS `BookLibInventory`.`Title` (
  `idTitle` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `TitleStr` VARCHAR(128) NOT NULL,
  PRIMARY KEY (`idTitle`, `TitleStr`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idTitle_UNIQUE` ON `BookLibInventory`.`Title` (`idTitle` ASC);

CREATE INDEX `TitleStr` ON `BookLibInventory`.`Title` (`TitleStr` ASC);


-- -----------------------------------------------------
-- Table `BookLibInventory`.`SignedByAuthor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BookLibInventory`.`SignedByAuthor` ;

CREATE TABLE IF NOT EXISTS `BookLibInventory`.`SignedByAuthor` (
  `BookFKsba` INT UNSIGNED NOT NULL,
  `IsSignedByAuthor` TINYINT NULL,
  PRIMARY KEY (`BookFKsba`))
ENGINE = InnoDB;

CREATE INDEX `BookFKsba` ON `BookLibInventory`.`SignedByAuthor` (`BookFKsba` ASC);


-- -----------------------------------------------------
-- Table `BookLibInventory`.`VolumeInSeries`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BookLibInventory`.`VolumeInSeries` ;

CREATE TABLE IF NOT EXISTS `BookLibInventory`.`VolumeInSeries` (
  `BookFKvs` INT UNSIGNED NOT NULL,
  `SeriesFK` INT UNSIGNED NOT NULL,
  `VolumeNumber` INT UNSIGNED NULL,
  PRIMARY KEY (`BookFKvs`))
ENGINE = InnoDB;

CREATE INDEX `BookFKvs` ON `BookLibInventory`.`VolumeInSeries` (`BookFKvs` ASC);

CREATE INDEX `SeriesFKvs` ON `BookLibInventory`.`VolumeInSeries` (`SeriesFK` ASC);


-- -----------------------------------------------------
-- Table `BookLibInventory`.`Owned`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BookLibInventory`.`Owned` ;

CREATE TABLE IF NOT EXISTS `BookLibInventory`.`Owned` (
  `BookFKo` INT UNSIGNED NOT NULL,
  `IsOwned` TINYINT NOT NULL,
  PRIMARY KEY (`BookFKo`))
ENGINE = InnoDB;

CREATE INDEX `BookFKo` ON `BookLibInventory`.`Owned` (`BookFKo` ASC);


-- -----------------------------------------------------
-- Table `BookLibInventory`.`ForSale`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BookLibInventory`.`ForSale` ;

CREATE TABLE IF NOT EXISTS `BookLibInventory`.`ForSale` (
  `BookFKfs` INT UNSIGNED NOT NULL,
  `IsForSale` TINYINT NOT NULL DEFAULT 0,
  `AskingPrice` DOUBLE NOT NULL DEFAULT 0,
  `EstimatedValue` DOUBLE NOT NULL DEFAULT 0,
  PRIMARY KEY (`BookFKfs`))
ENGINE = InnoDB;

CREATE INDEX `BookFKfs` ON `BookLibInventory`.`ForSale` (`BookFKfs` ASC);


-- -----------------------------------------------------
-- Table `BookLibInventory`.`HaveRead`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BookLibInventory`.`HaveRead` ;

CREATE TABLE IF NOT EXISTS `BookLibInventory`.`HaveRead` (
  `BookFKhr` INT UNSIGNED NOT NULL,
  `HaveReadBook` TINYINT NOT NULL DEFAULT 0,
  PRIMARY KEY (`BookFKhr`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `BookLibInventory`.`BookCategories`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BookLibInventory`.`BookCategories` ;

CREATE TABLE IF NOT EXISTS `BookLibInventory`.`BookCategories` (
  `idBookCategories` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `CategoryName` VARCHAR(45) NOT NULL COMMENT 'This will be strings like Non-Fiction, Mystery, Science-Fiction, Fantasy, Poetry, Art etc.',
  PRIMARY KEY (`idBookCategories`, `CategoryName`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idBookCategories_UNIQUE` ON `BookLibInventory`.`BookCategories` (`idBookCategories` ASC);

CREATE INDEX `CategoryNames` ON `BookLibInventory`.`BookCategories` (`CategoryName` ASC);


-- -----------------------------------------------------
-- Table `BookLibInventory`.`BookDescription`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `BookLibInventory`.`BookDescription` ;

CREATE TABLE IF NOT EXISTS `BookLibInventory`.`BookDescription` (
  `BookFKbd` INT UNSIGNED NOT NULL,
  `BookDescription` VARCHAR(1024) NULL,
  PRIMARY KEY (`BookFKbd`))
ENGINE = InnoDB;

CREATE INDEX `BookFKbD` ON `BookLibInventory`.`BookDescription` (`BookFKbd` ASC);

USE `BookLibInventory` ;

-- -----------------------------------------------------
-- procedure getAllBooksInLib
-- -----------------------------------------------------

USE `BookLibInventory`;
DROP procedure IF EXISTS `BookLibInventory`.`getAllBooksInLib`;

DELIMITER $$
USE `BookLibInventory`$$
CREATE PROCEDURE `getAllBooksInLib` ()
BEGIN

CREATE temporary table tmp engine=memory
    SELECT BookInfo.idBookInfo, BookInfo.AuthorFKbi, BookInfo.TitleFKbi, BookInfo.SeriesFKbi, BookInfo.BookFormatFKbi, BookInfo.CategoryFKbi FROM BookInfo
    LEFT JOIN (Owned)
        ON (BookInfo.idBookInfo = Owned.BookFK)
    WHERE Owned.IsOwned = 1;
 
SELECT
        a.LastName,
        a.FirstName,
        t.TitleStr,
        bf.FormatName,
        BCat.CategoryName,
        i.ISBNumber,
        pub.Copyright, 
        pub.Edition, 
        pub.Publisher, 
        pub.Copyright, 
        pub.Copyright, 
        s.SeriesName,
        v.VolumeNumber,
        pur.PurchaseDate,
        pur.ListPrice,
        pur.PaidPrice,
        pur.OutOfPrint,
        sba.Printing,
        o.IsOwned,
        hr.HaveReadBook,
        fs.IsForSale,
        fs.AskingPrice,
        fs.EstimatedValue,
        BDesc.BookDescription
    FROM tmp
    LEFT JOIN
    (
        AuthorsTab AS a,
        Title AS t,
        ISBN AS i,
        BookFormat AS bf,
        BookCategories AS BCat,
        SignedByAuthor AS sba,
        PurchasInfo AS pur,
        PublishingInfo AS pub,
        Series AS s,
        VolumeInSeries AS v,
        Owned AS o,
        ForSale AS fs,
        HaveRead AS hr,
        BookDescription AS BDesk
    ) ON (
        a.idAuthors = tmp.AuthorFKib,
        t.idTitle = tmp.TitleFK,
        bf.idFormat = tmp.BookFormatFKBi,
        BCat.idBookCategories = tmp.CategoryFKbI,
        s.idSeries = tmp.SeriesFK,
        v.BookFK = tmp.idBookInfo,
        sba.BookFKsba = tmp.idBookInfo,
        pub.BookFKPubI = tmp.idBookInfo,
        pur.BookFKPurI = tmp.idBookInfo,
        o.BookFK = tmp.idBookInfo,
        fr.BookFK = tmp.idBookInfo,
        hr.BookFK = tmp.idBookInfo,
        i.BookFK = tmp.idBookInfo,
        BDesk.BookFKbd = tmp.idBookInfo
    )
    order by (a.LastName, a.FirstName, t.TitleStr) ASC;
    
    drop temporary table if exists tmp;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getWishListBooks
-- -----------------------------------------------------

USE `BookLibInventory`;
DROP procedure IF EXISTS `BookLibInventory`.`getWishListBooks`;

DELIMITER $$
USE `BookLibInventory`$$
CREATE PROCEDURE `getWishListBooks` ()
BEGIN

CREATE temporary table tmp engine=memory
    SELECT idBookInfo, AuthorFK, TitleFK, SeriesFK, BookFormatFK from BookInfo LEFT JOIN (Owned)
    ON (BookInfo.idBookInfo = Owned.BookFK)
    WHERE Owned.IsOwned = 0;
 
SELECT a.LastName, a.FirstName, t.TitleStr, i.ISBNumber, pub.Copyright, s.SeriesName, v.VolumeNumber
    FROM tmp
    LEFT JOIN (AuthorsTab AS a, Title AS t, ISBN AS i, PublishingInfo AS pub, Series AS s, VolumeInSeries AS v)
        ON (tmp.AuthorFK = a.idAuthors, tmp.TitleFK = t.idTitle, tmp.idBookInfo = i.BookFK, 
            tmp.idBookInfo = pub.BookFK, tmp.SeriesFK = Series.idSeries, tmp.idBookInfo = v.idVolumeInSeries)
    ORDER BY (a.LastName, a.FirstName) ASC;
    
    drop temporary table if exists tmp;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure buyBook
-- -----------------------------------------------------

USE `BookLibInventory`;
DROP procedure IF EXISTS `BookLibInventory`.`buyBook`;

DELIMITER $$
USE `BookLibInventory`$$
CREATE PROCEDURE `buyBook` (IN AuthorLastName VARCHAR(20), IN AuthorFirstName VARCHAR(20))
BEGIN

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addBookToCollection
-- -----------------------------------------------------

USE `BookLibInventory`;
DROP procedure IF EXISTS `BookLibInventory`.`addBookToCollection`;

DELIMITER $$
USE `BookLibInventory`$$
CREATE PROCEDURE `addBookToCollection`
(
    IN AuthorLastName VARCHAR(20),
    IN AuthorFirstName VARCHAR(20),
    IN TitleStr VARCHAR(128), 
    IN BookFormatStr VARCHAR(45),
    IN SeriesName VARCHAR(128),
    IN VolumeNumber INT,
    IN ISBNumber VARCHAR(32),
    IN SignedByAuthor TINYINT,
    IN Owned TINYINT,
    IN Copyright INT,
    IN Edition INT,
    IN Printing INT,
    IN Publisher VARCHAR(45),
    IN OutOfPrint INT,
    OUT bookKey INT
)
BEGIN

    DECLARE authorKey, SeriesKey, formatKey, titleKey INT default 0;

    SET bookKey = 0;

    SELECT authorKey = idAuthors from AuthorsTab WHERE AuthorsTab.LastName = AuthorLastName AND AuthrosTab.FirstName = AuthorFirstName;
    if authorKey != NULL then
        SELECT formatKey = idFormat FROM BookFormat WHERE BookFormat.FormatName = BookFormatStr;
        IF formatKey != NULL THEN
            SELECT SeriesKey = idSeries FROM Series WHERE Series.SeriesName = SeriesName;
            SET titleKey = InsertTitleIfNotExist(TitleStr);
            
            SET bookKey = findbookKeyFromKeys(authorKey, titleKey, formatKey);
            IF bookKey = NULL THEN
                INSERT INTO BookInfo (BookInfo.AuthorFK, BookInfo.TitleFK, BookInfo.BookFormatFK, BookInfo.SeriesFK) VALUES (authorKey, titleKey, formatKey, SeriesKey);

                SET bookKey = findbookKeyFromKeys(authorKey, titleKey, formatKey);
                
                CALL AddPublishingInformation(bookKey, Copyright, Edition, Printing, Publisher, OutOfPrint);
            END IF;
            
        END IF;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addAuthor
-- -----------------------------------------------------

USE `BookLibInventory`;
DROP procedure IF EXISTS `BookLibInventory`.`addAuthor`;

DELIMITER $$
USE `BookLibInventory`$$
CREATE PROCEDURE `addAuthor` 
(
    IN LastNm VARCHAR(20),
    IN FirstNm VARCHAR(20),
    IN MiddleNm VARCHAR(20),
    IN DOB VARCHAR(4),
    IN DateOfDeath VARCHAR(4)
)
BEGIN
    INSERT INTO AuthorTab (LastName, FirstName, MiddleName, DateOfBirth, DateOfDeath) VALUES(LastNm, FirstNm, MiddleNm, DOB, DateOfDeath);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- FUNCTION insertTitleIfNotExist
-- -----------------------------------------------------

USE `BookLibInventory`;
DROP FUNCTION IF EXISTS `BookLibInventory`.`insertTitleIfNotExist`;

DELIMITER $$
USE `BookLibInventory`$$
CREATE FUNCTION `insertTitleIfNotExist` 
(
    TitleStr VARCHAR(128)
)
RETURNS INT
BEGIN

    DECLARE titleKey INT DEFAULT NULL;

    SET titleKey = findtitleKey(TitleStr);
    if titleKey = NULL then
        INSERT INTO Title (Title.TitleStr) VALUES(TitleStr);
        SET titleKey = findtitleKey(TitleStr);
    END IF;
    
    RETURN titleKey;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- FUNCTION findtitleKey
-- -----------------------------------------------------

USE `BookLibInventory`;
DROP FUNCTION IF EXISTS `BookLibInventory`.`findtitleKey`;

DELIMITER $$
USE `BookLibInventory`$$
CREATE FUNCTION `findtitleKey` 
(
    TitleStr VARCHAR(128)
)
RETURNS INT
BEGIN

    DECLARE titleKey INT DEFAULT NULL;
    
    SELECT Title.idTitle INTO titleKey FROM Title WHERE Title.TitleStr = TitleStr;
    
    RETURN titleKey;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- FUNCTION findauthorKey
-- -----------------------------------------------------

USE `BookLibInventory`;
DROP FUNCTION IF EXISTS `BookLibInventory`.`findauthorKey`;

DELIMITER $$
USE `BookLibInventory`$$
CREATE FUNCTION `findauthorKey` 
(
    firstName VARCHAR(20),
    lastName VARCHAR(20)
)
RETURNS INT
BEGIN
    
    DECLARE authorKey INT DEFAULT 0;
    
    SELECT AuthorsTab.idAuthors INTO authorKey FROM AuthorsTab WHERE AuthorsTab.LastName = lastName AND AuthorsTab.FirstName = firstName;
    
    RETURN authorKey;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- FUNCTION findbookKey
-- -----------------------------------------------------

USE `BookLibInventory`;
DROP FUNCTION IF EXISTS `BookLibInventory`.`findbookKey`;

DELIMITER $$
USE `BookLibInventory`$$
CREATE FUNCTION `findbookKey` 
(
    AuthorLast VARCHAR(20),
    AuthorFirst VARCHAR(20),
    TitleStr VARCHAR(128),
    FormatStr VARCHAR(45)
)
RETURNS INT
BEGIN

    DECLARE bookKey, authorKey, titleKey, formatKey INT DEFAULT NULL;
    
    SET authorKey = findauthorKey(AuthorFirst, AuthorLast);
    
    SET titleKey = findtitleKey(TitleStr);
    
    SET formatKey = getformatKeyFromStr(FormatStr);
    
    IF authorKey != NULL AND titleKey != NULL THEN
        SET bookKey = findbookKeyFromKeys(authorKey, titleKey, formatKey);
    END IF;
    
    RETURN bookKey;
        
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getBookData
-- -----------------------------------------------------

USE `BookLibInventory`;
DROP procedure IF EXISTS `BookLibInventory`.`getBookData`;

DELIMITER $$
USE `BookLibInventory`$$
CREATE PROCEDURE `getBookData` 
(
    IN AuthorLast VARCHAR(20),
    IN AuthorFirst VARCHAR(20),
    IN TitleStr VARCHAR(128),
    IN FormatStr VARCHAR(45)
)
BEGIN

    DECLARE bookKey INT;
    
    SET bookKey = findbookKey(AuthorLast, AuthorFirst, TitleStr);
    
    SELECT
        a.LastName,
        a.FirstName,
        t.TitleStr,
        bf.FormatName,
        BCat.CategoryName,
        i.ISBNumber,
        pub.Copyright, 
        pub.Edition, 
        pub.Publisher, 
        pub.Copyright, 
        pub.Copyright, 
        s.SeriesName,
        v.VolumeNumber,
        pur.PurchaseDate,
        pur.ListPrice,
        pur.PaidPrice,
        pur.OutOfPrint,
        sba.Printing,
        o.IsOwned,
        hr.HaveReadBook,
        fs.IsForSale,
        fs.AskingPrice,
        fs.EstimatedValue,
        BDesc.BookDescription
    FROM BookInfo AS B
    LEFT JOIN (
        AuthorsTab AS a,
        Title AS t,
        ISBN AS i,
        BookFormat AS bf,
        BookCategories AS BCat,
        SignedByAuthor AS sba,
        PurchasInfo AS pur,
        PublishingInfo AS pub,
        Series AS s,
        VolumeInSeries AS v,
        Owned AS o,
        ForSale AS fs,
        HaveRead AS hr,
        BookDescription AS BDesk
    ) ON (
        a.idAuthors = tmp.AuthorFKib,
        t.idTitle = tmp.TitleFK,
        bf.idFormat = tmp.BookFormatFKBi,
        BCat.idBookCategories = tmp.CategoryFKbI,
        s.idSeries = tmp.SeriesFK,
        v.BookFK = tmp.idBookInfo,
        sba.BookFKsba = tmp.idBookInfo,
        pub.BookFKPubI = tmp.idBookInfo,
        pur.BookFKPurI = tmp.idBookInfo,
        o.BookFK = tmp.idBookInfo,
        fr.BookFK = tmp.idBookInfo,
        hr.BookFK = tmp.idBookInfo,
        i.BookFK = tmp.idBookInfo,
        BDesk.BookFKbd = tmp.idBookInfo
    )
    WHERE BookInfo.idBookInfo = bookKey;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- FUNCTION getformatKeyFromStr
-- -----------------------------------------------------

USE `BookLibInventory`;
DROP FUNCTION IF EXISTS `BookLibInventory`.`getformatKeyFromStr`;

DELIMITER $$
USE `BookLibInventory`$$
CREATE FUNCTION `getformatKeyFromStr` 
(
    formatStr VARCHAR(45)
)
RETURNS INT
BEGIN

    DECLARE formatKey INT DEFAULT NULL;

    SELECT BookFormat.idFormat INTO formatKey FROM BookFormat WHERE BookFormat.FormatName = formatStr;
    
    RETURN formatKey;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getAllBookFormatsWithKeys
-- -----------------------------------------------------

USE `BookLibInventory`;
DROP procedure IF EXISTS `BookLibInventory`.`getAllBookFormatsWithKeys`;

DELIMITER $$
USE `BookLibInventory`$$
CREATE PROCEDURE `getAllBookFormatsWithKeys` ()
BEGIN

/*
 * Example usage would be to get all the formats to CREATE a control embeds the primary key rather than the text.
 */

    SELECT BookFormat.FormatName, BookFormat.idFormat FROM BookFormat;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getAllSeriesByOneAuthor
-- -----------------------------------------------------

USE `BookLibInventory`;
DROP procedure IF EXISTS `BookLibInventory`.`getAllSeriesByOneAuthor`;

DELIMITER $$
USE `BookLibInventory`$$
CREATE PROCEDURE `getAllSeriesByOneAuthor` 
(
    IN AuthorLastName VARCHAR(20),
    IN AuthorFirstName VARCHAR(20)
)
BEGIN

    DECLARE authorKey INT DEFAULT NULL;
    
    SET authorKey = findauthorKey(AuthorFirstName, AuthorLastName);
    
    SELECT Series.SeriesName FROM Series WHERE Series.AuthorFK = authorKey;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- FUNCTION findbookKeyFromKeys
-- -----------------------------------------------------

USE `BookLibInventory`;
DROP FUNCTION IF EXISTS `BookLibInventory`.`findbookKeyFromKeys`;

DELIMITER $$
USE `BookLibInventory`$$
CREATE FUNCTION `findbookKeyFromKeys` 
(
    authorKey INT,
    titleKey INT,
    formatKey INT
)
RETURNS INT
BEGIN

    DECLARE bookKey INT DEFAULT NULL;
    
    IF authorKey != NULL AND titleKey != NULL then
        SELECT BookInfo.idBookInfo INTO bookKey FROM BookInfo WHERE BookInfo.AuthorFKbi = authorKey AND BookInfo.TitleFKbi = titleKey AND BookInfo.FormatFKbi = formatKey;
    END IF;
    
    RETURN bookKey;
        
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure UpdateAuthor
-- -----------------------------------------------------

USE `BookLibInventory`;
DROP procedure IF EXISTS `BookLibInventory`.`UpdateAuthor`;

DELIMITER $$
USE `BookLibInventory`$$
CREATE PROCEDURE `UpdateAuthor` 
(
    IN LastName VARCHAR(20),
    IN FirstName VARCHAR(20),
    IN MiddleName VARCHAR(20),
    IN DOB VARCHAR(4),
    IN DateOfDeath VARCHAR(4)
)
BEGIN

    UPDATE AuthorTab 
        SET 
            AuthorTab.MiddleNameOrInitial = MiddleName,
            AuthorTab.DOB = DOB,
            AuthorTab.DateOfDeath = DateOfDeath
        WHERE AuthorTab.LastName = LastName AND AuthorTab.FirstnameOrInitial = FirstName;

END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
